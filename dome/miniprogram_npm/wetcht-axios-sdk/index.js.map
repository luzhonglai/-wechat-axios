{"version":3,"sources":["index.js","promise.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*\n * @Descripttion: \n * @repository: https://github.com/luzhonglai\n * @Author: ZhongLai Lu\n * @Date: 2020-12-17 11:01:25\n * @LastEditors: Zhonglai Lu\n * @LastEditTime: 2020-12-18 00:53:50\n */\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('./promise.js');Object.defineProperty(exports, 'promiseify', { enumerable: true, configurable: true, get: function() { return __TEMP__.promiseify; } });Object.defineProperty(exports, 'promiseAll', { enumerable: true, configurable: true, get: function() { return __TEMP__.promiseAll; } });","/*\n * @Descripttion:\n * @repository: https://github.com/luzhonglai\n * @Author: ZhongLai Lu\n * @Date: 2020-12-17 11:00:32\n * @LastEditors: Zhonglai Lu\n * @LastEditTime: 2020-12-21 17:20:11\n */\n\n/**\n * @name: promiseify\n * @msg: 处理普通函数转Rromise形式\n * @param {fun} 传入小程序Api函数\n * @return {*} 返回Rromise实例\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function promiseify(fun) {\n  if (typeof fun !== 'function') return fn\n  return (args = {}) => {\n    new Promise((resolve, reject) => {\n      fun(\n        Object.assign(args, {\n          success: resolve,\n          fail: reject,\n        })\n      )\n    })\n  }\n};exports.promiseify = promiseify\n\n/**\n * @name: hasCallback\n * @msg: 判断Api传入的参数类型\n */\nfunction hasCallback(args) {\n  if (typeof args !== 'object') return false\n\n  let keyType = ['fail', 'success', 'complete']\n  for (const key of keyType) {\n    if (typeof args[key] == 'function') return true\n  }\n  return false\n}\n\n/**\n * @name: promiseAll\n * @msg: 说明获取小程序所有api，筛选key类型 1、函数进行promise嵌套 2、object不动\n * @param {wx} 传入小程序wx内置对象\n * @param {zdy} 传入自定义的对象\n * @return {zdy} 转成支持promise的Api\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });function promiseAll(wx = { ...my }, zdy = {}) {\n  Object.keys(wx).forEach((key) => {\n    let fn = wx[key]\n    if (typeof fn === 'function') {\n      zdy[key] = (args) => {\n        if (hasCallback(args)) {\n          fn(args)\n        } else {\n          return promiseify(fn)(args)\n        }\n      }\n    } else {\n      zdy[key] = fn\n    }\n  })\n  return zdy\n};exports.promiseAll = promiseAll\n"]}